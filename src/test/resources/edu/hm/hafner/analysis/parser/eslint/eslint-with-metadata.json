{
  "results": [
    {
      "filePath": "/var/lib/jenkins/workspace/eslint/fullOfProblems.js",
      "messages": [
        {
          "ruleId": "no-unused-vars",
          "severity": 1,
          "message": "'addOne' is defined but never used.",
          "line": 1,
          "column": 10,
          "nodeType": "Identifier",
          "messageId": "unusedVar",
          "endLine": 1,
          "endColumn": 16
        },
        {
          "ruleId": "use-isnan",
          "severity": 2,
          "message": "Use the isNaN function to compare with NaN.",
          "line": 2,
          "column": 9,
          "nodeType": "BinaryExpression",
          "messageId": "comparisonWithNaN",
          "endLine": 2,
          "endColumn": 17,
          "suggestions": [
            {
              "messageId": "replaceWithIsNaN",
              "fix": {
                "range": [
                  29,
                  37
                ],
                "text": "!Number.isNaN(i)"
              },
              "desc": "Replace with Number.isNaN."
            },
            {
              "messageId": "replaceWithCastingAndIsNaN",
              "fix": {
                "range": [
                  29,
                  37
                ],
                "text": "!Number.isNaN(Number(i))"
              },
              "desc": "Replace with Number.isNaN and cast to a Number."
            }
          ]
        }
      ],
      "suppressedMessages": [],
      "errorCount": 4,
      "fatalErrorCount": 0,
      "warningCount": 4,
      "fixableErrorCount": 1,
      "fixableWarningCount": 4,
      "source": "function addOne(i) {\n    if (i != NaN) {\n        return i ++\n    } else {\n      return\n    }\n};"
    }
  ],
  "metadata": {
    "cwd": "/var/lib/jenkins/workspace/eslint",
    "rulesMeta": {
      "no-unused-vars": {
        "type": "problem",
        "docs": {
          "description": "Disallow unused variables",
          "extendsBaseRule": true,
          "recommended": "recommended",
          "url": "https://eslint.org/docs/latest/rules/no-unused-vars"
        },
        "messages": {
          "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}.",
          "usedIgnoredVar": "'{{varName}}' is marked as ignored but is used{{additional}}.",
          "usedOnlyAsType": "'{{varName}}' is {{action}} but only used as a type{{additional}}."
        },
        "schema": [
          {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "all",
                  "local"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "args": {
                    "type": "string",
                    "description": "Whether to check all, some, or no arguments.",
                    "enum": [
                      "all",
                      "after-used",
                      "none"
                    ]
                  },
                  "argsIgnorePattern": {
                    "type": "string",
                    "description": "Regular expressions of argument names to not check for usage."
                  },
                  "caughtErrors": {
                    "type": "string",
                    "description": "Whether to check catch block arguments.",
                    "enum": [
                      "all",
                      "none"
                    ]
                  },
                  "caughtErrorsIgnorePattern": {
                    "type": "string",
                    "description": "Regular expressions of catch block argument names to not check for usage."
                  },
                  "destructuredArrayIgnorePattern": {
                    "type": "string",
                    "description": "Regular expressions of destructured array variable names to not check for usage."
                  },
                  "ignoreClassWithStaticInitBlock": {
                    "type": "boolean",
                    "description": "Whether to ignore classes with at least one static initialization block."
                  },
                  "ignoreRestSiblings": {
                    "type": "boolean",
                    "description": "Whether to ignore sibling properties in `...` destructurings."
                  },
                  "reportUsedIgnorePattern": {
                    "type": "boolean",
                    "description": "Whether to report variables that match any of the valid ignore pattern options if they have been used."
                  },
                  "vars": {
                    "type": "string",
                    "description": "Whether to check all variables or only locally-declared variables.",
                    "enum": [
                      "all",
                      "local"
                    ]
                  },
                  "varsIgnorePattern": {
                    "type": "string",
                    "description": "Regular expressions of variable names to not check for usage."
                  }
                }
              }
            ]
          }
        ]
      },
      "use-isnan": {
        "hasSuggestions": true,
        "type": "problem",
        "docs": {
          "description": "Require calls to `isNaN()` when checking for `NaN`",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/use-isnan"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "enforceForSwitchCase": {
                "type": "boolean"
              },
              "enforceForIndexOf": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ],
        "defaultOptions": [
          {
            "enforceForIndexOf": false,
            "enforceForSwitchCase": true
          }
        ],
        "messages": {
          "comparisonWithNaN": "Use the isNaN function to compare with NaN.",
          "switchNaN": "'switch(NaN)' can never match a case clause. Use Number.isNaN instead of the switch.",
          "caseNaN": "'case NaN' can never match. Use Number.isNaN before the switch.",
          "indexOfNaN": "Array prototype method '{{ methodName }}' cannot find NaN.",
          "replaceWithIsNaN": "Replace with Number.isNaN.",
          "replaceWithCastingAndIsNaN": "Replace with Number.isNaN and cast to a Number.",
          "replaceWithFindIndex": "Replace with Array.prototype.{{ methodName }}."
        }
      }
    }
  }
}
